- _object ||= form.object
-# TODO: may be it works
-# - puts field.bindings.keys.inspect if field.bindings
- field.bindings ||= {}
- field.bindings[:object] ||= _object
-# - puts field.bindings.keys.inspect if field.bindings
-# - puts
-# - puts
-# - puts form.class.inspect
-# - puts field.bindings.keys.inspect
-# - puts _object.inspect
-# - puts field.bindings[:object].inspect
-# - puts
- if ['string', 'integer', 'phone', 'email', 'address', 'url', 'domain'].include?(_object.type)
  = form.text_field :raw, :value => field.value, id: form.dom_id(field)
- if _object.type == 'boolean'
  = form.check_box :raw, {:value => field.value, id: form.dom_id(field)}, 'true', 'false'
- if _object.type == 'color'
  = form.text_field :raw, :value => field.value, 'data-color' => true, style: "background-color: ##{field.value}", id: form.dom_id(field)
- elsif %w(text yaml phones).include?( _object.type )
  = form.text_area :raw, :value => field.value, :rows => 10, :cols => 80, id: form.dom_id(field)
- elsif _object.type == 'code'
  :ruby
    #binding.pry
    js_data = {
      csspath: asset_path('codemirror.css'),
      jspath: asset_path('codemirror.js'),
      options:  {
        mode: 'htmlmixed',
        theme: 'monokai',
        lineNumbers: true
      },
      locations: {
        mode: asset_path('codemirror/modes/htmlmixed.js'),
        theme: asset_path('codemirror/themes/monokai.css')
      }
    }

  = form.text_area field.method_name, field.html_attributes.reverse_merge(data: { richtext: 'codemirror', options: js_data.to_json }, id: form.dom_id(field)).reverse_merge({ value: field.form_value })
- elsif _object.type == 'html' || _object.type == 'sanitized'
  - if form.respond_to?(:cktext_area)
    = javascript_include_tag "ckeditor/init"
    = form.cktext_area :raw, :value => field.value, :rows => 10, :cols => 80, id: form.dom_id(field)
  - elsif Object.const_defined?('Rich')
    = form.text_area :raw, :value => field.value, :rows => 10, :cols => 80, id: form.dom_id(field)

    = javascript_include_tag "rich/base.js"
    :javascript
      if(window.CKEDITOR){
        var instance = window.CKEDITOR.instances['#{form.dom_id(field)}'];
        if(instance) { window.CKEDITOR.remove(instance); }
        window.CKEDITOR.replace('#{form.dom_id(field)}', #{Rich.options().to_json.html_safe});
      }
  - else
    .alert.alert-error
      = t('admin.settings.no_ckeditor_detected')
    = form.text_area :raw, :value => field.value, :rows => 10, :cols => 80, id: form.dom_id(field)


- elsif _object.type == 'js'
  :ruby
    #binding.pry
    js_data = {
      csspath: asset_path('codemirror.css'),
      jspath: asset_path('codemirror.js'),
      options:  {
        mode: 'js',
        theme: 'night',
        lineNumbers: true
      },
      locations: {
        mode: asset_path('codemirror/modes/jsx.js'),
        theme: asset_path('codemirror/themes/night.css')
      }
    }

  = form.text_area field.method_name, field.html_attributes.reverse_merge(data: { richtext: 'codemirror', options: js_data.to_json }, id: form.dom_id(field)).reverse_merge({ value: field.form_value })


- elsif _object.type == 'css'
  :ruby
    #binding.pry
    js_data = {
      csspath: asset_path('codemirror.css'),
      jspath: asset_path('codemirror.js'),
      options:  {
        mode: 'css',
        theme: 'night',
        lineNumbers: true
      },
      locations: {
        mode: asset_path('codemirror/modes/css.js'),
        theme: asset_path('codemirror/themes/night.css')
      }
    }

  = form.text_area field.method_name, field.html_attributes.reverse_merge(data: { richtext: 'codemirror', options: js_data.to_json }, id: form.dom_id(field)).reverse_merge({ value: field.form_value })


- elsif _object.type == 'array'
  = javascript_include_tag 'rails_admin_settings/array'

  = form.hidden_field field.method_name, value: "", multiple: true
  - field.formatted_value.each do |val|
    = render partial: 'rails_admin/main/rails_admin_settings/array/element', locals: {form: form, field: field, val: val}

  - _template = capture do
    = render partial: 'rails_admin/main/rails_admin_settings/array/element', locals: {form: form, field: field, val: ""}
  %p
    = link_to "добавить", "#", class: "rails_admin_settings_array_element_add_link array_element_add_link", data: {template: _template.html_safe}

- elsif _object.type == 'hash'
  -# TODO; goto HANCOCK
  .rails-admin-jsoneditor-wrapper
    = javascript_include_tag "rails_admin_jsoneditor/rails_admin_jsoneditor", media: 'all'
    = stylesheet_link_tag "rails_admin_jsoneditor/rails_admin_jsoneditor", media: 'all'

    .rails-admin-jsoneditor-field{style: "display: none"}
      = form.send field.view_helper, field.method_name, field.html_attributes.merge(value: (field.form_value || {}).to_json)

    .rails-admin-jsoneditor.cke_disabled
  -# = javascript_include_tag 'rails_admin_settings/hash'
  -# = stylesheet_link_tag 'rails_admin_settings/hash'

  -# - field.formatted_value.each_pair do |name, val|
  -#   = render partial: 'rails_admin/main/rails_admin_settings/hash/element', locals: {form: form, field: field, name: name, val: val}

  -# - _template = capture do
  -#   - name, val = "new", ""
  -#   = render partial: 'rails_admin/main/rails_admin_settings/hash/element', locals: {form: form, field: field, name: name, val: val}
  -# %p
  -#   = link_to "добавить", "#", class: "rails_admin_settings_hash_element_add_link", data: {template: _template.html_safe}
  -#   / = " | "
  -#   / = link_to "показать дубликаты", "#", class: "rails_admin_settings_hash_element_duplicate_trigger", data: {text: "скрыть дубликаты"}


- elsif _object.type == 'enum'
  = javascript_include_tag 'rails_admin_settings/enum'
  = form.select field.method_name, _object.possible_data, { include_blank: false }.reverse_merge({ selected: field.form_value }), field.html_attributes.reverse_merge({ data: { enumeration: true }, placeholder: t('admin.misc.search'), class: 'rails_admin_settings_enum enum', id: form.dom_id(field)})


- elsif _object.type == 'multiple_enum'
  = javascript_include_tag 'rails_admin_settings/enum'
  :ruby
    js_data = {
      xhr: false,
      sortable: false,
      cacheAll: true,
      regional: {
        chooseAll: t("admin.misc.chose_all"),
        chosen: t("admin.misc.chosen", name: config.label_plural),
        clearAll: t("admin.misc.clear_all"),
        search: t("admin.misc.search"),
        up: t("admin.misc.up"),
        down: t("admin.misc.down")
      }
    }
  = form.select field.method_name, _object.possible_data, { include_blank: false, selected: _object.value, object: _object }, field.html_attributes.reverse_merge({data: { filteringmultiselect: true, options: js_data.to_json }, multiple: true, class: 'rails_admin_settings_enum multiple_enum', id: form.dom_id(field)})


- elsif _object.type == 'custom_enum'
  = javascript_include_tag 'rails_admin_settings/enum'
  = form.select field.method_name, _object.full_possible_data, { include_blank: false }.reverse_merge({ selected: field.form_value }), field.html_attributes.reverse_merge({ data: { enumeration: true }, placeholder: t('admin.misc.search_or_add_yours'), class: 'rails_admin_settings_enum custom_enum', id: form.dom_id(field)})


- elsif _object.type == 'multiple_custom_enum'
  = javascript_include_tag 'rails_admin_settings/enum'
  :ruby
    js_data = {
      xhr: false,
      sortable: false,
      cacheAll: true,
      regional: {
        chooseAll: t("admin.misc.chose_all"),
        chosen: t("admin.misc.chosen", name: config.label_plural),
        clearAll: t("admin.misc.clear_all"),
        search: t("admin.misc.search_or_add_yours"),
        up: t("admin.misc.up"),
        down: t("admin.misc.down")
      }
    }
  = form.select field.method_name, _object.full_possible_data, { include_blank: false, selected: _object.formatted_value, object: _object }, field.html_attributes.reverse_merge({data: { filteringmultiselect: true, options: js_data.to_json }, multiple: true, class: 'rails_admin_settings_enum multiple_custom_enum'}, id: form.dom_id(field))
