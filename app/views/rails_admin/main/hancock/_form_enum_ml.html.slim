- unless field.multiple?
  ruby: 
    opts = { 
      include_blank: true,
      options: {
        collection: field.enum
      }
    }.reverse_merge({ 
      selected: field.form_value, 
      html_attributes: field.html_attributes.reverse_merge({ 
        data: { enumeration: true }, 
        placeholder: t('admin.misc.search'), 
        class: 'hancock_enum'
      })
    })
  = render 'form', opts.merge({form: form, field: field, field_type: :select})
  / = form.select field.method_name, field.enum, { include_blank: true }.reverse_merge({ selected: field.form_value }), field.html_attributes.reverse_merge({ data: { enumeration: true }, placeholder: t('admin.misc.search'), class: 'hancock_enum'})
  
- else
  ruby:
    js_data = {
      xhr: false,
      sortable: false,
      cacheAll: true,
      regional: {
        chooseAll: t("admin.misc.chose_all"),
        chosen: t("admin.misc.chosen", name: config.label_plural),
        clearAll: t("admin.misc.clear_all"),
        search: t("admin.misc.search"),
        up: t("admin.misc.up"),
        down: t("admin.misc.down")
      }
    }
    opts = { 
      object: form.object, 
      options: {
        collection: field.enum,
        multiple: true
      },
      html_attributes: field.html_attributes.reverse_merge({
        data: { 
          filteringmultiselect: true, 
          options: js_data.to_json 
        }, 
        multiple: true, 
        class: 'hancock_enum'
      })
    }
  = render 'form', opts.merge({form: form, field: field, field_type: :select})
  / = form.select field.method_name, field.enum, { selected: field.form_value, object: form.object }, field.html_attributes.reverse_merge({data: { filteringmultiselect: true, options: js_data.to_json }, multiple: true, class: 'hancock_enum'})
