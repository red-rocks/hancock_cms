require 'rails_admin/custom_show_in_app'

require_relative 'hancock_cms'
# Add `require_relative '%hancock_plugin_name%'` here for configure it.
# `require_relative 'hancock_cms'` reconfigure it by default.
# So u need do it again. If u have some changes.

<% if Hancock.mongoid? %>
RailsAdminSettings.track_history! if Hancock.config.history_tracking
<% end %>

RailsAdmin.config do |config|
  ## == Devise ==
  # this is required if not using cancan
  #config.authenticate_with do
    #warden.authenticate! scope: :user
  #end

  config.parent_controller = '::ApplicationController'

  config.current_user_method(&:current_user)

  ## == Cancan ==
  config.authorize_with :cancancan
<% if Hancock.mongoid? %>
  ## == MongoidAudit
  config.audit_with :mongoid_audit, 'HistoryTracker'
<% elsif Hancock.active_record? %>
  config.audit_with :paper_trail, 'User', 'PaperTrail::Version'
<% end %>


  config.actions do
    dashboard # mandatory

    # collection actions
    index
    new
    export
    bulk_delete

    # member actions
    show
    edit
    delete

    if Hancock.config.history_tracking
      history_index
      history_show
    end

    toggle
    # toggle_menu # for Hancock::Pages
    # sitemap     # for Hancock::Seo

    Hancock.rails_admin_config_for_actions(self)

    # root :backup do
    #   visible do
    #     bindings and bindings[:controller]._current_user and bindings[:controller]._current_user.admin?
    #   end
    #   link_icon do
    #     'fa fa-cloud-upload'
    #     # 'fa fa-cloud-download'
    #   end
    #   http_methods do
    #     [:get, :post, :delete]
    #   end
    #   controller do
    #     Proc.new do
    #       path = "public/system/snapshots"
    #       if request.get?

    #       elsif request.post?
    #         if params[:mongodump] == "1"
    #           BackupJob.make_backup_later(operation: 'mongodump')
    #         else
    #           BackupJob.make_backup_later
    #         end
    #         # Thread.new do
    #         #   path = "public/system/snapshots"
    #         #   t = Time.new.to_i
    #         #   db_name = Mongoid.default_client.options[:database]
    #         #   pub_path = "snapshot-#{t}/data.zip"
    #         #   x = ".git/\\* log/\\* #{path}/snapshot-\\* tmp/\\*"

    #         #   # touch     = "touch ./public/#{pub_path}"
    #         #   # touch     = "mkdir -p #{path}/ ; rm ./#{path}/#{pub_path}"
    #         #   touch     = "mkdir -p #{path}/snapshot-#{t} rm #{path}/snapshot-#{t}/*"
    #         #   mongodump = "mongodump --db #{db_name}"
    #         #   zip       = "zip -r ./#{path}/#{pub_path} . -x #{x} -s 50m"
    #         #   rm        = "rm ./dump -rf"
    #         #   puts "#{[touch, mongodump, zip, rm].join(" ; ")}"
    #         #   `#{[touch, mongodump, zip, rm].join(" ; ")}`
    #         #   puts "FINISHED"
    #         # end
    #         flash[:notice] = "Бэкап начат. В скором времени появится ссылка на архив."
    #         redirect_to backup_path

    #       elsif request.delete?
    #         BackupJob.make_remove_backup_later(snapshot: params[:snapshot])
    #         flash[:notice] = "Удаление бэкапа запущено. Ожидайте."
    #         # snapshot = params[:snapshot].to_i
    #         # snapshot_file = "./#{path}/snapshot-#{snapshot}.zip"
    #         # snapshot_path = "./#{path}/snapshot-#{snapshot}"
    #         # if File.exists?(snapshot_file) or true
    #         #   # if File.delete(snapshot_file)
    #         #   begin
    #         #     FileUtils.rm_rf(snapshot_file) 
    #         #     FileUtils.rm_rf(snapshot_path)
    #         #     flash[:notice] = "Бэкап удален."
    #         #   rescue
    #         #     flash[:error] = "Не удалось удалить бэкап."
    #         #   end
    #         # else
    #         #   flash[:error] = "Бэкап не найден."
    #         # end
    #         redirect_to backup_path
    #       end
    #     end
    #   end
    # end

  end

  config.main_app_name = ['<%= Rails.application.class.name.split('::')[0] %>', 'Админка']

  config.excluded_models ||= []
  config.excluded_models << [
      'RailsAdmin::CustomShowInApp', 'HistoryTracker',
      'Ckeditor::Asset', 'Ckeditor::AttachmentFile', 'Ckeditor::Picture', 'Ckeditor::Folder',
      'Hancock::EmbeddedElement'
  ]
  config.excluded_models.flatten!
  config.excluded_models.uniq!
end

# [required] fix for timezones to be displayed in local time instead of UTC
module RailsAdmin
  module Config
    module Fields
      module Types
        class Datetime
          def value
            bindings[:object].send(name)
          end
        end
      end
    end
  end
end
